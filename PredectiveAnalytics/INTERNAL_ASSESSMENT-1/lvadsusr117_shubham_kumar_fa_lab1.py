# -*- coding: utf-8 -*-
"""LVADSUSR117_Shubham kumar_FA_Lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ojLZq0fOHFKT-ygHOpmf8RQQFVT_cHAE
"""

import pandas as pd
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier as dcl
from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix
data = pd.read_csv("/content/sample_data/loan_approval.csv")
data.head()

data.shape

print(data.isnull().sum())#no null values

data.dropna(inplace=True)

Q1 = data[' income_annum'].quantile(0.25)
Q3 = data[' income_annum'].quantile(0.75)
IQR = Q3 - Q1
data = data[~((data[' income_annum'] < (Q1 - 1.5 * IQR)) | (data[' income_annum'] > (Q3 + 1.5 * IQR)))]

print(data.info())

print(data.describe())

data.duplicated().sum()# no duplicate values

sns.countplot(x=' loan_status', data=data)
plt.title('Distribution of loan inn data')
plt.show()

sns.pairplot(data)
plt.title('Pairplot of Features by Loan Status')
plt.show()

label_encoder = LabelEncoder()
data[' education'] = label_encoder.fit_transform(data[[' education']])
data[' loan_status'] = label_encoder.fit_transform(data[[' loan_status']])
data[' self_employed'] = label_encoder.fit_transform(data[[' self_employed']])

X = data.drop(['loan_id', ' loan_status'], axis=1)
y = data[' loan_status']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = dcl()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, pos_label=1)
recall = recall_score(y_test, y_pred, pos_label=1)
conf_matrix = confusion_matrix(y_test, y_pred)

print(f'Accuracy: {accuracy}')
print(f'Precision: {precision}')
print(f'Recall: {recall}')
print('Confusion Matrix:')
print(conf_matrix)

sns.heatmap(conf_matrix, annot=True, cmap='jet')
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix')
plt.show()