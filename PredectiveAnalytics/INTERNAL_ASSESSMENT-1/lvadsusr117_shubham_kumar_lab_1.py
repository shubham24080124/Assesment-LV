# -*- coding: utf-8 -*-
"""LVADSUSR117 Shubham kumar LAB 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zkE4sZNPYmQmHX4bSW2fqay9LNiNB-Sy
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
df=pd.read_csv("/content/sample_data/expenses.csv")

df.head()

df.isnull().sum()   # there are no null values in the data

df.describe()

fig = plt.figure(figsize =(10, 7))
data = df[['age'	,'sex','bmi','children','smoker','region','charges']]

sns.boxplot(data)#detecting outliers

def cap_data(df):
    for col in df.columns:
        print("capping the ",col)
        if (((df[col].dtype)=='float64') | ((df[col].dtype)=='int64')):
            percentiles = df[col].quantile([0.01,0.99]).values
            df[col][df[col] <= percentiles[0]] = percentiles[0]
            df[col][df[col] >= percentiles[1]] = percentiles[1]
        else:
            df[col]=df[col]
    return df

final_df=cap_data(df)
sns.boxplot(final_df)#Removing outliers

df.corr()

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()

df['sex_Encoded'] = label_encoder.fit_transform(final_df['sex'])
df['smoker_Encoded'] = label_encoder.fit_transform(final_df['smoker'])
df['region_Encoded'] = label_encoder.fit_transform(final_df['region'])

print(final_df[['sex', 'sex_Encoded']])

X = final_df[['age'	,'sex_Encoded','bmi','children','smoker_Encoded','region_Encoded']]
y=final_df['charges']

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25, random_state=10)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

X_train=scaler.fit_transform(X_train)
X_test=scaler.fit_transform(X_test)

from sklearn.linear_model import LinearRegression
regression = LinearRegression()

regression.fit(X_train,y_train)

y_pred = regression.predict(X_test)
y_pred

from sklearn.metrics import mean_absolute_error,mean_squared_error
mse = mean_squared_error(y_test,y_pred)
mae = mean_absolute_error(y_test,y_pred)
rmse = np.sqrt(mse)
print(mse)
print(mae)
print(rmse)

from sklearn.metrics import r2_score
score = r2_score(y_test,y_pred)
print(score)

plt.scatter(y_test,y_pred)