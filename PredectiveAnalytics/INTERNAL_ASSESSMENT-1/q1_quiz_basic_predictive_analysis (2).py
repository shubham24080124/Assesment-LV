# -*- coding: utf-8 -*-
"""Q1 Quiz Basic Predictive analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19vR27fl381qYF0Lzaem5OAUH-GBBbt86
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.svm import SVC

import pandas as pd
df=pd.read_csv('/content/sample_data/DSAI-LVA-DATASET for Quiz.csv')

train_data, test_data = train_test_split(df, test_size=0.2, random_state=42)


train_data.to_csv("train_data.csv", index=False)
test_data.to_csv("test_data.csv", index=False)

train_df = pd.read_csv("train_data.csv")
test_df = pd.read_csv("test_data.csv")

label_encoder = LabelEncoder()
train_df['ParentEducation'] = label_encoder.fit_transform(train_df['ParentEducation'])
test_df['ParentEducation'] = label_encoder.transform(test_df['ParentEducation'])

X_train = train_df.drop(columns=["Pass"])
y_train = train_df["Pass"]
X_test = test_df.drop(columns=["Pass"])
y_test = test_df["Pass"]

label_encoder = LabelEncoder()
y_train_encoded = label_encoder.fit_transform(y_train)
y_test_encoded = label_encoder.transform(y_test)

models = {
    "XGBoost": XGBClassifier(),
    "SVM": SVC(),
    "Decision Tree": DecisionTreeClassifier(random_state=42),
    "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42)


}

model_accuracy = {}
conf_matrices = {}
for name, model in models.items():
    model.fit(X_train, y_train_encoded)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test_encoded, y_pred)
    model_accuracy[name] = accuracy
    conf_matrices[name] = confusion_matrix(y_test_encoded, y_pred)

model_comparison = pd.DataFrame.from_dict(model_accuracy, orient='index', columns=['Accuracy'])
model_comparison.to_csv("model_comparison.csv")

fig, axes = plt.subplots(2, 2, figsize=(12, 10))
for i, (name, conf_matrix) in enumerate(conf_matrices.items()):
    sns.heatmap(conf_matrix, annot=True, cmap="jet", fmt="d", ax=axes[i//2, i%2])
    axes[i//2, i%2].set_title(f"{name} Confusion Matrix")
    axes[i//2, i%2].set_xlabel('Predicted labels')
    axes[i//2, i%2].set_ylabel('True labels')
plt.tight_layout()
plt.savefig("confusion_matrices.png")

plt.figure(figsize=(10, 6))
plt.bar(model_accuracy.keys(), model_accuracy.values(), color='Red')
plt.xlabel('Models')
plt.ylabel('Accuracy')
plt.title('Model Accuracy')
plt.savefig("model_accuracy.png")

plt.show()
print(model_accuracy.values())